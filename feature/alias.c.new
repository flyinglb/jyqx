// alias.c
// From ES2
// Modified for XKX by Xiang (12/15/95)
// Modified by Cmd (12/31/2000)
#include <ansi.h>

#define MAX_REPEAT 50
#define MAX_ALIASES 40
#define HISTORY_BUFFER_SIZE 10
#define MORE_REPEAT_RESULT 1

#define UNCONCIOUS_MSG "\n\n"+HIB+"突然你感到胸口发闷，脑子发涨，你正想......\n\n\n"


mapping alias;

nosave string *history,last_input;
nosave int last_cmd,last_check_time,input_cnt=0;

string process_input(string str)
{
    string *args, cmd, argstr;
    int i, j;
    
    //added by long
    if(this_object()->query_temp("disable_inputs"))
	return "什麽？\n";
    notify_fail("你想干什么？\n"); 
    
        // The following modified by Cmd
        if(input_cnt==0) last_check_time=time();
        if (time()==last_check_time)
        {
            if (input_cnt>=MAX_REPEAT-1)
            {
                if (MORE_REPEAT_RESULT) 
                {
                    tell_object( this_object(),UNCONCIOUS_MSG);
                    this_object()->unconcious();
                }
                else
                {
                    return "";
                }
            }
            else
            {
                 input_cnt++;
                 if (str != "") last_input = str;
             }
         }
         else
         {
             input_cnt=0;
             if (str != "") last_input = str;
         }
         // This is modify ending by Cmd

    if( str[0]=='!' ) {
	if( pointerp(history) && sizeof(history) ) {
	    if( sscanf(str, "!%d", i) )
		str = (string)history[(HISTORY_BUFFER_SIZE + last_cmd - i) % HISTORY_BUFFER_SIZE];
	    else
		str = history[last_cmd];
	} else
	    return "";
    } else {
	if( !pointerp(history) ) history = allocate(HISTORY_BUFFER_SIZE);
	last_cmd = (last_cmd + 1) % HISTORY_BUFFER_SIZE;
	history[last_cmd] = str;
    }
    
    if( mapp(alias) ) {
	
	if( !undefinedp(alias[str]) )
	    return replace_string( alias[str], "$*", "" );
	
	if( sscanf(str, "%s %s", cmd, argstr)==2 && !undefinedp(alias[cmd]) ) {
	    cmd = replace_string( alias[cmd], "$*", argstr );
	    args = explode(argstr, " ");
	    if( (j = sizeof(args)) )
		for(i=0; i<j; i++)
		    cmd = replace_string( cmd, "$" + (i+1), args[i] );
	    return cmd;
	}
    }
    
    return (string)ALIAS_D->process_global_alias(str);
}

int set_alias(string verb, string replace)
{
    if( !replace ) {
	if( mapp(alias) ) map_delete(alias, verb);
	return 1;
    } else {
	if( !mapp(alias) ) alias = ([ verb:replace ]);
	else if( sizeof(alias) > MAX_ALIASES )
	    return notify_fail("您设定的 alias 太多了，请先删掉一些不常用的。\n");
	else alias[verb] = replace;
	return 1;
    }
}

mapping query_all_alias()
{
    return alias;
}

